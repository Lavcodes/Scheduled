body {
    width: 100vw;
    height: 100vh;
    display: flex;
    flex-direction: column;
    font-family: sans-serif;
    font-size: 16px;
    background-color: #fff;
  }
  
  *, *::before, *::after {
    box-sizing: border-box;
  }

  .custom-contain {
      margin : 20px 5px 20px 5px;
      background-color: #fff;
      display : flex;
      flex-direction:column;
      justify-content: flex-start;
  }
  
  .custom-field {
    position: relative;
    font-size: 14px;
    border-top: 20px solid transparent;
    margin-top: 0px ;
    --field-padding: 12px;
  }
  
  .custom-field input {
    border: none;
    -webkit-appearance: none;
    -ms-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background: #f2f2f2;
    padding: var(--field-padding);
    border-radius: 3px;
    width: 250px;
    outline: none;
    font-size: 14px;
  }
  
  .custom-field .placeholder {
    position: absolute;
    left: var(--field-padding);
    width: calc(100% - (var(--field-padding) * 2));
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    top: 50%;
    line-height: 100%;
    transform: translateY(-50%);
    color: #aaa;
    transition: 
      top 0.3s ease,
      color 0.3s ease,
      font-size 0.3s ease;
  }
  
  .custom-field input.dirty + .placeholder,
  .custom-field input:focus + .placeholder,
  .custom-field input:not(:placeholder-shown) + .placeholder {
    top: -10px;
    font-size: 10px;
    color: #222;
  }
  
  
  /* ONE */
  .custom-field.one input {
    background: none;
    border: 2px solid #ddd;
    transition: border-color 0.3s ease;
  }
  
  .custom-field.one input + .placeholder {
    left: 8px;
    padding: 0px 5px;

  }
  
  .custom-field.one input.dirty,
  .custom-field.one input:not(:placeholder-shown),
  .custom-field.one input:focus {
    border-color: #222;
    transition-delay: 0.1s
  }
  
  .custom-field.one input.dirty + .placeholder,
  .custom-field.one input:not(:placeholder-shown) + .placeholder,
  .custom-field.one input:focus + .placeholder {
    top: 0px;
    font-size: 10px;
    color: #222;
    background: rgb(255, 255, 255);
    width: auto
  }
  .custom-radio-btn {
    --size: 25px;
    min-width: var(--size);
    height: var(--size);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    
    margin: 0 10px;
    position: relative;
    padding-left: var(--size);
  }
  
  .custom-radio-btn input {
    display: none;
  }
  
  /* handle if you want label on the left of the checkmark instead */
  
  .custom-radio-btn.left {
    padding-left: 0;
    padding-right: var(--size);
  }
  
  /* label  */
  
  .custom-radio-btn .label {
    margin-left: 5px;
  }
  
  .custom-radio-btn.left .label {
    margin: 0 5px;
  }
  
  .custom-radio-btn[aria-label]::after {
    content: attr(aria-label);
    display: inline-block;
    margin-left: 5px;
  }
  
  /* checkmark */
  
  .custom-radio-btn .checkmark {
    --gap: 3px;
    --border: 2px;
    --check-color: #ff5722;
    width: var(--size);
    height: var(--size);
    border-radius: 50%;
    display: inline-block;
    transition: opacity 0.3s ease;
    /* changes from the video  */
    
    border: var(--border) solid #444;
    padding: var(--gap);
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .custom-radio-btn.left .checkmark {
    left: auto;
    right: 0;
  }
  
  .custom-radio-btn input:checked ~ .checkmark {
  
    /*  content box origin will make sure the bg-image only stays inside content area in between padding  */
    background-origin: content-box;
    background-repeat: no-repeat;
    background-image: radial-gradient(
      circle at center, 
      var(--check-color) 
       /* the size of the check mark is determined by subtracting from the size of the circle
       the border(both sides) and the gap(both sides) than dividing it by 2 to get the radius of the circle        */
         calc((var(--size) - (var(--border) * 2) - (var(--gap) * 2)) / 2), 
      rgba(255, 255, 255, 0) 0);
  }

  input[type=time] {
    border: none;
    color: #2a2c2d;
    font-size: 14px;
    font-family: helvetica;
    width: 160px;
  }
  
  /* Wrapper around the hour, minute, second, and am/pm fields as well as 
  the up and down buttons and the 'X' button */
  input[type=time]::-webkit-datetime-edit-fields-wrapper {
    display: flex;
  }
  
  /* The space between the fields - between hour and minute, the minute and 
  second, second and am/pm */
  input[type=time]::-webkit-datetime-edit-text {
    padding: 19px 4px;
  }
  
  /* The naming convention for the hour, minute, second, and am/pm field is
  `-webkit-datetime-edit-{field}-field` */
  
  /* Hour */
  input[type=time]::-webkit-datetime-edit-hour-field {
    background-color: #f2f4f5;
    border-radius: 15%;
    padding: 19px 13px;
  }
  
  /* Minute */
  input[type=time]::-webkit-datetime-edit-minute-field {
    background-color: #f2f4f5;
    border-radius: 15%;
    padding: 19px 13px;
  }
  
  /* AM/PM */
  input[type=time]::-webkit-datetime-edit-ampm-field {
    background-color: #7155d3;
    border-radius: 15%;
    color: #fff;
    padding: 19px 13px;
  }
  
  /* 'X' button for resetting/clearing time */
  input[type=time]::-webkit-clear-button {
    display: none;
  }
  
  /* Up/Down arrows for incrementing/decrementing the value */
  input[type=time]::-webkit-inner-spin-button {
    display: none;
  }
  
  .date-input-container {

    padding-left: 5px;
   
  }

  .date-label {
    margin : 5px 5px 5px 5px;
  }